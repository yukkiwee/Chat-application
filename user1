#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <signal.h>

#include "aes.h"

#define BSIZE 320

uint8_t key[] = "qwertyuioplkjhg";
uint8_t iv[]  = "123456789098765";

void error(const char *msg) {
    perror(msg);
    exit(0);
}

int main(int argc, char *argv[]) {
    int sockfd, portno, n, pid;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    char buffer[BSIZE];
    char paddedData[BSIZE];
    unsigned char crypted_data[BSIZE];

    if (argc < 3) {
        fprintf(stderr,"usage %s <hostname> <port>\n", argv[0]);
        exit(0);
    }

    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd < 0) {
        error("ERROR opening socket");
    }

    server = gethostbyname(argv[1]);

    if (server == NULL) {
        fprintf(stderr, "ERROR, no such host\n");
        exit(0);
    }

    bzero((char *) &serv_addr, sizeof(serv_addr));

    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(portno);

    if(connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0) {
        error("ERROR connecting");
    }

    //while(1) {
    switch(pid = fork()) {
    case -1:
        error("ERROR fork");
    case 0:
        while(1) {
            //printf("Please enter the message: ");
            bzero(buffer, BSIZE);
            //printf("Message: ");
            fgets(buffer, BSIZE - 1, stdin);

            strncpy(paddedData, buffer, BSIZE);
            AES128_CBC_encrypt_buffer(crypted_data, (unsigned char*)paddedData, BSIZE, key, iv);

            n = write(sockfd, crypted_data, BSIZE - 1);

            if(n < 0) {
                error("ERROR writing to socket");
            }
        }
    default:
        while(1) {
            //bzero(buffer,256);

            n = read(sockfd, buffer, BSIZE - 1);

            AES128_CBC_decrypt_buffer((unsigned char*)paddedData, (unsigned char*)buffer, BSIZE, key, iv);

            if(n < 0) {
                error("ERROR reading from socket");
            }

            printf("<<server>>: %s", paddedData);
        }
    }
